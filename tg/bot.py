import asyncio
from aiogram import Bot, F
from db.statuses import DownloadStatus, WatermarkStatus
from db.mongo_db import AsyncDatabase
from observers.observer import Observer
from aiogram.types import Message, CallbackQuery
from aiogram import Dispatcher, Router, Bot
from aiogram.filters import Command
from aiogram_media_group import media_group_handler
from tg.stategroup import ConfigEdit, config_inline_keyboard
from aiogram.fsm.context import FSMContext  
from aiogram.types import BotCommand
from aiogram.enums import ParseMode
import logging

logger = logging.getLogger(__name__)

async def set_default_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="config", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
    ]
    await bot.set_my_commands(commands)

def setup_handlers(router:Router,bot:Bot,db:AsyncDatabase,observer:Observer):

    

    @router.message(Command("start"))
    async def start_handler(message: Message):
        try:
            await db.add_user(
                id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            await message.answer("üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –¢—ã –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
                                 "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
                "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö: —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç (OCR), –¥–æ–±–∞–≤–∏—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /config, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n"
                "‚Ä¢ <b>text</b> ‚Äî —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞\n"
                "‚Ä¢ <b>color</b> ‚Äî —Ü–≤–µ—Ç (–≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA, –Ω–∞–ø—Ä–∏–º–µ—Ä: 255,255,255,128)\n"
                "‚Ä¢ <b>font_size</b> ‚Äî —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞\n"
                "‚Ä¢ <b>line_spacing</b> ‚Äî –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
                "‚Ä¢ <b>angle</b> ‚Äî —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Ç–µ–∫—Å—Ç–∞\n\n",
                parse_mode=ParseMode.HTML
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler –¥–ª—è {message.from_user.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    @router.message(Command("help"))
    async def help_handler(message: Message):
        try:
            await message.answer(
                "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
                "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö: —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç (OCR), –¥–æ–±–∞–≤–∏—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /config, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n"
                "‚Ä¢ <b>text</b> ‚Äî —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞\n"
                "‚Ä¢ <b>color</b> ‚Äî —Ü–≤–µ—Ç (–≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA, –Ω–∞–ø—Ä–∏–º–µ—Ä: 255,255,255,128)\n"
                "‚Ä¢ <b>font_size</b> ‚Äî —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞\n"
                "‚Ä¢ <b>line_spacing</b> ‚Äî –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
                "‚Ä¢ <b>angle</b> ‚Äî —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Ç–µ–∫—Å—Ç–∞",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_handler –¥–ª—è {message.from_user.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


    @router.message(Command("config"))
    async def config_handler(message: Message, state: FSMContext):

        pop_list = [
            "font_family",
            "font_style",
            "text_weight"
        ]
        try:
            user_id = message.from_user.id
            config = (await db.get_configuration(user_id))["config"]

            for key in pop_list:
                config.pop(key)

            await message.answer("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:", 
                         reply_markup=config_inline_keyboard(config))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ config_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @router.callback_query(F.data.startswith("edit_"))
    async def config_edit_callback(callback:CallbackQuery,state:FSMContext):
        key = callback.data.removeprefix("edit_")
        await state.update_data(key=key)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `{key}`:")
        await state.set_state(ConfigEdit.waiting_for_value)
        await callback.answer()

    @router.message(ConfigEdit.waiting_for_value)
    async def config_edit_value(message: Message, state: FSMContext):
        user_id = message.from_user.id
        value_raw = message.text.strip()
        user_data = await state.get_data()
        key = user_data["key"]

        if key == "color":

            parts = value_raw.replace(', ', ' ').replace(',', ' ').split()

            if len(parts) != 4:
                raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: R, G, B, A (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255 255 255 128)")
            try:
                value = [int(x) for x in parts]
            except ValueError:
                raise ValueError("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")

        elif key in ["font_size", "line_spacing", "angle"]:
            try:
                value = int(value_raw)
            except ValueError:
                raise ValueError(f"–û–∂–∏–¥–∞–ª–æ—Å—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{key}'.")
        else:
            value = value_raw
        try:
            success = await db.update_configuration(user_id, key, value)
            if success:
                await message.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä `{key}` –æ–±–Ω–æ–≤–ª—ë–Ω.")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")

            await state.clear()
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")


    @router.message(
        F.media_group_id,
        F.photo | (F.document & F.document.mime_type.startswith("image/"))
    )
    @media_group_handler
    async def handle_album(messages: list[Message]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª—å–±–æ–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            await messages[0].answer(f"üîç –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {len(messages)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            success = 0
            user_id = messages[0].from_user.id
            message_id = messages[0].message_id
            files = []

            for msg in messages:
                
                if msg.photo:
                    file_id = msg.photo[-1].file_id
                else:
                    file_id = msg.document.file_id

                file = await msg.bot.get_file(file_id)
                
                files.append({
                                "file_id": file.file_id,
                                "file_path": file.file_path
                            })
                

                success += 1

                

            await observer.add_message_with_update(user_id,message=
                                                        {
                                                            "message_id": message_id,
                                                            "files": files
                                                        })
            
            await messages[0].answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {success}/{len(messages)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        except Exception as e:
                logger.error(f"ERROR: {e}")
                await messages[0].answer(f"‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã")



    @router.message(
        F.photo | (F.document & F.document.mime_type.startswith("image/"))
    )
    async def handle_single_image(message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        await message.answer("üñº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            if message.photo:
                file_id = message.photo[-1].file_id
            else:
                file_id = message.document.file_id

            file = (await message.bot.get_file(file_id))

            await observer.add_message_with_update(message.from_user.id,message=
                                                   {
                                                       "message_id": message.message_id,
                                                       "files": [
                                                           {
                                                               "file_id": file.file_id,
                                                               "file_path": file.file_path
                                                           }
                                                       ]
                                                   })

        except Exception as e:
            logger.error(f"ERROR: {e}")
            await message.answer(f"‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã")




